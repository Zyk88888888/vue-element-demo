{"remainingRequest":"/Users/macbook/Desktop/vue-element-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbook/Desktop/vue-element-demo/src/components/TagsView/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbook/Desktop/vue-element-demo/src/components/TagsView/index.vue","mtime":1544948893822},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport store from '@/vuex/store.js'\nexport default {\n  name: \"TagsView\",\n  data() {\n    return {\n      msg: \"我是TagsView\"\n    };\n  },\n  store,\n  components: {},\n  methods: {\n    /*组件内部的方法*/\n    addTags() {\n      const route = this.$route; //获取地址栏路由\n      this.$store.commit({\n        type: \"addTags\",\n        route\n      });\n    },\n    isActive(route) {\n      return route.path === this.$route.path;\n    }, //当前地址栏路径是否与渲染的路径相同 样式匹配\n    closeSelectedTag(view) {\n      this.$store.dispatch({type: \"closeTags\", view})\n        .then(views => {\n          // 此时的views是指的被删除后的visitedViews数组中存在的元素;\n          if (this.isActive(view)) {\n            // 当前关闭的标签是否是被选中的标签;\n            const latestView = views.slice(-1)[0];\n            if (latestView) {\n              this.$router.push(latestView); //如果数组不为空则让选中的标签为紧邻关闭标签的那一个\n            } else {\n              this.$router.push(\"/\"); //如果为空则页面跳转到/\n            }\n          }\n        });\n    }\n  },\n  watch: {\n    $route() {\n      // console.log('======route====')\n      // console.log(this.$route)\n      this.addTags();\n    } //地址栏变化了就触发这个添加方法\n  },\n  mounted() {\n    /*页面挂载结束*/\n  },\n  updated() {\n    /*数据更新完成*/\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/TagsView","sourcesContent":["<template>\n  <div class=\"tags-view-wrapper\">\n    <router-link\n      class=\"tags-view-item\"\n      :to=\"item\"\n      :key=\"item.path\"\n      :class=\"isActive(item)?'active':''\"\n      v-for=\"(item) in this.$store.state.visitedTags\"\n    >\n      {{item.meta.title}}\n      <span class=\"el-icon-close\" @click.prevent.stop=\"closeSelectedTag(item)\"></span>\n    </router-link>\n  </div>\n</template>\n\n<script>\nimport store from '@/vuex/store.js'\nexport default {\n  name: \"TagsView\",\n  data() {\n    return {\n      msg: \"我是TagsView\"\n    };\n  },\n  store,\n  components: {},\n  methods: {\n    /*组件内部的方法*/\n    addTags() {\n      const route = this.$route; //获取地址栏路由\n      this.$store.commit({\n        type: \"addTags\",\n        route\n      });\n    },\n    isActive(route) {\n      return route.path === this.$route.path;\n    }, //当前地址栏路径是否与渲染的路径相同 样式匹配\n    closeSelectedTag(view) {\n      this.$store.dispatch({type: \"closeTags\", view})\n        .then(views => {\n          // 此时的views是指的被删除后的visitedViews数组中存在的元素;\n          if (this.isActive(view)) {\n            // 当前关闭的标签是否是被选中的标签;\n            const latestView = views.slice(-1)[0];\n            if (latestView) {\n              this.$router.push(latestView); //如果数组不为空则让选中的标签为紧邻关闭标签的那一个\n            } else {\n              this.$router.push(\"/\"); //如果为空则页面跳转到/\n            }\n          }\n        });\n    }\n  },\n  watch: {\n    $route() {\n      // console.log('======route====')\n      // console.log(this.$route)\n      this.addTags();\n    } //地址栏变化了就触发这个添加方法\n  },\n  mounted() {\n    /*页面挂载结束*/\n  },\n  updated() {\n    /*数据更新完成*/\n  }\n};\n</script>\n\n<style scoped>\n</style>"]}]}