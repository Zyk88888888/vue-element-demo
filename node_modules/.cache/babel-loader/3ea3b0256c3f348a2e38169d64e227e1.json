{"remainingRequest":"/Users/macbook/Desktop/vue-element-demo/node_modules/babel-loader/lib/index.js!/Users/macbook/Desktop/vue-element-demo/src/request/http.js","dependencies":[{"path":"/Users/macbook/Desktop/vue-element-demo/src/request/http.js","mtime":1545028093513},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport cookie from 'js-cookie';\nimport { Message } from 'element-ui';\nvar Axios = axios.create({\n  // 配置axios的默认URL\n  baseURL: \"\",\n  // 配置超时时间\n  timeout: 10000,\n  // 响应数据的类型\n  responseType: \"json\",\n  // 允许跨域携带cookie\n  withCredentials: false,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n  }\n}); // 配置请求拦截\n\nAxios.interceptors.request.use(function (config) {\n  config.data = JSON.stringify(config.data);\n  config.headers['Accept'] = \"application/json, text/plain, */*\"; // const token = cookie.get('名称');\n  // if(token){ config.params = {'token':token}}\n\n  return config;\n}, function (error) {\n  Message({\n    message: '系统出错',\n    type: 'error',\n    duration: 3 * 1000\n  });\n  return Promise.reject(error);\n}); // 配置响应拦截\n\nAxios.interceptors.response.use(function (response) {\n  // 在这里你可以判断后台返回数据携带的请求码\n  if (response.status == 200) {\n    return Promise.resolve(response);\n  } else {\n    Message({\n      message: response.statusText || '网络出错',\n      type: 'error',\n      duration: 3 * 1000\n    });\n    return Promise.reject(error);\n  }\n}, function (error) {\n  Message({\n    message: '后台出错',\n    type: 'error',\n    duration: 3 * 1000\n  });\n  return Promise.reject(error);\n});\n/**\n * 封装方法\n * @param url\n * @param data\n * @returns { Promise }\n */\n\nexport default {\n  get: function get(url) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(function (resolve, reject) {\n      Axios.get(url, {\n        params: params\n      }).then(function (response) {\n        resolve(response.data);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  post: function post(url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(function (resolve, reject) {\n      Axios.post(url, data).then(function (response) {\n        resolve(response.data);\n      }, function (err) {\n        reject(err);\n      });\n    });\n  },\n  put: function put(url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(function (resolve, reject) {\n      Axios.put(url, data).then(function (response) {\n        resolve(response.data);\n      }, function (err) {\n        reject(err);\n      });\n    });\n  }\n};",{"version":3,"sources":["/Users/macbook/Desktop/vue-element-demo/src/request/http.js"],"names":["axios","cookie","Message","Axios","create","baseURL","timeout","responseType","withCredentials","headers","interceptors","request","use","config","data","JSON","stringify","error","message","type","duration","Promise","reject","response","status","resolve","statusText","get","url","params","then","catch","err","post","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport cookie from 'js-cookie'\nimport { Message } from 'element-ui'\n\nconst Axios = axios.create({\n    // 配置axios的默认URL\n    baseURL: \"\", \n    // 配置超时时间\n    timeout: 10000,\n    // 响应数据的类型\n    responseType: \"json\",\n    // 允许跨域携带cookie\n    withCredentials: false, \n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n    }\n});\n\n\n\n// 配置请求拦截\nAxios.interceptors.request.use(config => {\n    config.data = JSON.stringify(config.data);\n    config.headers['Accept'] = \"application/json, text/plain, */*\"\n    // const token = cookie.get('名称');\n    // if(token){ config.params = {'token':token}}\n    return config\n}, error => {\n    Message({ message: '系统出错', type: 'error', duration: 3 * 1000 })\n    return Promise.reject(error)\n}\n);\n\n// 配置响应拦截\nAxios.interceptors.response.use(response => {\n    // 在这里你可以判断后台返回数据携带的请求码\n    if (response.status==200){\n        return Promise.resolve(response);\n    }else{\n        Message({ message: response.statusText||'网络出错', type: 'error', duration: 3 * 1000 })\n        return Promise.reject(error)\n    }\n    \n}, error => {\n    Message({ message: '后台出错', type: 'error', duration: 3 * 1000 })\n    return Promise.reject(error)\n});\n\n/**\n * 封装方法\n * @param url\n * @param data\n * @returns { Promise }\n */\nexport default {\n    get(url, params = {}) {\n        return new Promise((resolve, reject) => {\n            Axios.get(url, {\n                params: params\n            })\n                .then(response => {\n                    resolve(response.data);\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        })\n    },\n    post(url, data = {}) {\n        return new Promise((resolve, reject) => {\n            Axios.post(url, data)\n                .then(response => {\n                    resolve(response.data);\n                }, err => {\n                    reject(err)\n                })\n        })\n    },\n    put(url, data = {}) {\n        return new Promise((resolve, reject) => {\n            Axios.put(url, data)\n                .then(response => {\n                    resolve(response.data);\n                }, err => {\n                    reject(err)\n                })\n        })\n    }\n}\n\n\n\n\n"]}]}