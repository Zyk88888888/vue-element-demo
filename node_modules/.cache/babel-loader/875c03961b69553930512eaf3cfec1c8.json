{"remainingRequest":"/Users/macbook/Desktop/vue-element-demo/node_modules/babel-loader/lib/index.js!/Users/macbook/Desktop/vue-element-demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbook/Desktop/vue-element-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbook/Desktop/vue-element-demo/src/components/TagsView/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbook/Desktop/vue-element-demo/src/components/TagsView/index.vue","mtime":1544948893822},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbook/Desktop/vue-element-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport store from '@/vuex/store.js';\nexport default {\n  name: \"TagsView\",\n  data: function data() {\n    return {\n      msg: \"我是TagsView\"\n    };\n  },\n  store: store,\n  components: {},\n  methods: {\n    /*组件内部的方法*/\n    addTags: function addTags() {\n      var route = this.$route; //获取地址栏路由\n\n      this.$store.commit({\n        type: \"addTags\",\n        route: route\n      });\n    },\n    isActive: function isActive(route) {\n      return route.path === this.$route.path;\n    },\n    //当前地址栏路径是否与渲染的路径相同 样式匹配\n    closeSelectedTag: function closeSelectedTag(view) {\n      var _this = this;\n\n      this.$store.dispatch({\n        type: \"closeTags\",\n        view: view\n      }).then(function (views) {\n        // 此时的views是指的被删除后的visitedViews数组中存在的元素;\n        if (_this.isActive(view)) {\n          // 当前关闭的标签是否是被选中的标签;\n          var latestView = views.slice(-1)[0];\n\n          if (latestView) {\n            _this.$router.push(latestView); //如果数组不为空则让选中的标签为紧邻关闭标签的那一个\n\n          } else {\n            _this.$router.push(\"/\"); //如果为空则页面跳转到/\n\n          }\n        }\n      });\n    }\n  },\n  watch: {\n    $route: function $route() {\n      // console.log('======route====')\n      // console.log(this.$route)\n      this.addTags();\n    } //地址栏变化了就触发这个添加方法\n\n  },\n  mounted: function mounted() {\n    /*页面挂载结束*/\n  },\n  updated: function updated() {\n    /*数据更新完成*/\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,OAAA,KAAA,MAAA,iBAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,GAAA,EAAA;AADA,KAAA;AAGA,GANA;AAOA,EAAA,KAAA,EAAA,KAPA;AAQA,EAAA,UAAA,EAAA,EARA;AASA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,OAFA,qBAEA;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CADA,CACA;;AACA,WAAA,MAAA,CAAA,MAAA,CAAA;AACA,QAAA,IAAA,EAAA,SADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAAA;AAIA,KARA;AASA,IAAA,QATA,oBASA,KATA,EASA;AACA,aAAA,KAAA,CAAA,IAAA,KAAA,KAAA,MAAA,CAAA,IAAA;AACA,KAXA;AAWA;AACA,IAAA,gBAZA,4BAYA,IAZA,EAYA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA;AAAA,QAAA,IAAA,EAAA,WAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,EACA,IADA,CACA,UAAA,KAAA,EAAA;AACA;AACA,YAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA,cAAA,UAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;AACA,cAAA,UAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,EADA,CACA;;AACA,WAFA,MAEA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,EADA,CACA;;AACA;AACA;AACA,OAZA;AAaA;AA1BA,GATA;AAqCA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA;AACA;AACA,WAAA,OAAA;AACA,KALA,CAKA;;AALA,GArCA;AA4CA,EAAA,OA5CA,qBA4CA;AACA;AACA,GA9CA;AA+CA,EAAA,OA/CA,qBA+CA;AACA;AACA;AAjDA,CAAA","sourcesContent":["<template>\n  <div class=\"tags-view-wrapper\">\n    <router-link\n      class=\"tags-view-item\"\n      :to=\"item\"\n      :key=\"item.path\"\n      :class=\"isActive(item)?'active':''\"\n      v-for=\"(item) in this.$store.state.visitedTags\"\n    >\n      {{item.meta.title}}\n      <span class=\"el-icon-close\" @click.prevent.stop=\"closeSelectedTag(item)\"></span>\n    </router-link>\n  </div>\n</template>\n\n<script>\nimport store from '@/vuex/store.js'\nexport default {\n  name: \"TagsView\",\n  data() {\n    return {\n      msg: \"我是TagsView\"\n    };\n  },\n  store,\n  components: {},\n  methods: {\n    /*组件内部的方法*/\n    addTags() {\n      const route = this.$route; //获取地址栏路由\n      this.$store.commit({\n        type: \"addTags\",\n        route\n      });\n    },\n    isActive(route) {\n      return route.path === this.$route.path;\n    }, //当前地址栏路径是否与渲染的路径相同 样式匹配\n    closeSelectedTag(view) {\n      this.$store.dispatch({type: \"closeTags\", view})\n        .then(views => {\n          // 此时的views是指的被删除后的visitedViews数组中存在的元素;\n          if (this.isActive(view)) {\n            // 当前关闭的标签是否是被选中的标签;\n            const latestView = views.slice(-1)[0];\n            if (latestView) {\n              this.$router.push(latestView); //如果数组不为空则让选中的标签为紧邻关闭标签的那一个\n            } else {\n              this.$router.push(\"/\"); //如果为空则页面跳转到/\n            }\n          }\n        });\n    }\n  },\n  watch: {\n    $route() {\n      // console.log('======route====')\n      // console.log(this.$route)\n      this.addTags();\n    } //地址栏变化了就触发这个添加方法\n  },\n  mounted() {\n    /*页面挂载结束*/\n  },\n  updated() {\n    /*数据更新完成*/\n  }\n};\n</script>\n\n<style scoped>\n</style>"],"sourceRoot":"src/components/TagsView"}]}